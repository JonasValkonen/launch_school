{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41bf1206-d03d-401f-bc50-2de94fcf1ef6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# py100 solutions and notes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b72b540-cc6a-425a-bc19-d884d19e00a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"terminal book \n",
    "\n",
    "\n",
    "\n",
    "    Command\tDescription\n",
    "    cd      Change directory.\n",
    "    ls      List files and directories in current directory.\n",
    "    pwd\t    Display the path of the current directory.\n",
    "    touch\tCreate a file.\n",
    "    mkdir\tCreate a directory.\n",
    "    rm\t    Remove a file or directory. Warning: deleting a file or directory with this command is permanent!\n",
    "    cp\t    Copy a file or directory.\n",
    "    mv\t    Move or rename a file or directory.\n",
    "    echo\tPrint text to STDOUT.\n",
    "    cat\t    Display contents of a file.\n",
    "    more\tDisplay contents of a file, starting at the top and letting the user scroll down.\n",
    "    less\tDisplay contents of a file in an even more interactive way.\n",
    "    head\tDisplay the first part of a file.\n",
    "    tail\tDisplay the last part of a file.\n",
    "    man\t    Display documentation about a command.\n",
    "    env     what variables have been set in the environment, along with their values\n",
    "    tar     compress/decompress\n",
    "    \n",
    "    / - The root directory or a separator when listing directories\n",
    "    . - The current directory (also ./) or the same level\n",
    "    .. - The directory one level up (also ../)\n",
    "    ../.. - The directory that is two levels up; that is, the directory that is one level up from ..\n",
    "    ~ - Your \"home\" directory, or the directory you are placed in when you log in.\n",
    "    * - The \"splat\" or \"glob\" operator. This is the wildcard of the command line and represents \"any characters.\"\n",
    "\n",
    "    Examples:\n",
    "    /home/ubuntu/ - The ubuntu directory within the home directory within the root (/) directory.\n",
    "    ../../ - Up two directories (which takes us back to the root directory).\n",
    "    ./ - The same directory (which is still /).\n",
    "    home/ubuntu/ - Back down into the home directory, then the ubuntu directory.\n",
    "    \n",
    "    running cd $HOME is the same as running cd /home/ubuntu, \n",
    "    assuming your home directory is /home/ubuntu\n",
    "\n",
    "    You can see exactly what variables have been set, along \n",
    "    with their values, by running env at the command line.\n",
    "\n",
    "    SOMETHING=\"a value\"\n",
    "    ...\n",
    "    $SOMETHING\n",
    "    a value\n",
    "\n",
    "    $ PS1=\"[ ] \"\n",
    "    [ ] \n",
    "\n",
    "    nano .zshrc\n",
    "\n",
    "    Special Characters\tDescription\n",
    "    %m: Hostname (up to the first dot)\n",
    "    %M: Full hostname\n",
    "    %n: User name\n",
    "    %~: Current working directory, with ~ for home directory\n",
    "    %d or %/: Current working directory\n",
    "    %c or %C: Trailing component of the current working directory\n",
    "    %D{<format>}: Current date in specified format (uses strftime formatting)\n",
    "    %*: Current time in 24-hour format\n",
    "    %n: Newline\n",
    "    %#: Prompt character (# if root, % otherwise)\n",
    "\n",
    "    $ MESSAGE='Hello, world!'\n",
    "    $ COMMAND='echo'\n",
    "    $ $COMMAND $MESSAGE\n",
    "    Hello, world!\n",
    "\n",
    "    $ MESSAGE1=\"This is message 1.\"\n",
    "    $ MESSAGE2=\"This is message 2.\"\n",
    "    $ MESSAGE=\"$MESSAGE1 $MESSAGE2\"\n",
    "    $ echo $MESSAGE\n",
    "    This is message 1. This is message 2.\n",
    "\n",
    "    vs\n",
    "\n",
    "    $ MESSAGE='$MESSAGE1 $MESSAGE2'\n",
    "    $ echo $MESSAGE\n",
    "    $MESSAGE1 $MESSAGE2\n",
    "\n",
    "    You can create or install executables. To make it so that a \n",
    "    custom executable can be used like a built-in command, all \n",
    "    you have to do is make sure it has the correct permissions \n",
    "    (discussed in the next chapter), and add the path to the \n",
    "    directory it is contained in to the PATH variable in \n",
    "    ~/.bashrc or ~/.zshrc:\n",
    "\n",
    "    export PATH=\"/path/to/my/executables-directory:$PATH\"\n",
    "\n",
    "    cd ~\n",
    "    echo '#!/bin/bash' > test.sh # Replace existing test.sh file\n",
    "    echo 'echo \"Hello world\"' >> test.sh\n",
    "    chmod +x test.sh # Make sure test.sh has the executable permission\n",
    "    $ ./test.sh\n",
    "    Hello world\n",
    "    $ test.sh\n",
    "    -bash: test.sh: command not found\n",
    "    $ PATH=$PATH:$HOME\n",
    "    $ echo $PATH\n",
    "    /usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin:/home/ubuntu/bin:/home/ubuntu\n",
    "    $ test.sh\n",
    "    Hello world\n",
    "    $ cd /\n",
    "    $ test.sh\n",
    "    Hello world\n",
    "\n",
    "\n",
    "    Number\tPermission\n",
    "    0\tNo permission granted.\n",
    "    1\tCan execute.\n",
    "    2\tCan write.\n",
    "    3\tCan write and execute (2 + 1 = 3).\n",
    "    4\tCan read.\n",
    "    5\tCan read and execute (4 +1 = 5).\n",
    "    6\tCan read and write (4 + 2 = 6).\n",
    "    7\tCan read and write and execute (4 + 2 + 1 = 7).\n",
    "\n",
    "    chmod 754 test.sh\n",
    "    ls -l test.sh\n",
    "    -rwxr-xr--  1 bob admin 0B Jul 15 15:24 test.sh\n",
    "\n",
    "    To determine if your user is part of a certain group,\n",
    "    use the groups command\n",
    "\n",
    "    Switch to root user: \n",
    "    $ su -\n",
    "    Password:\n",
    "\n",
    "    sudo reboot\n",
    "\n",
    "    Database management commands: mysql, psql, redis-client, mongo\n",
    "    Text editors: vim, pico, nano, emacs\n",
    "    REPLs (Read-Eval-Print-Loop), which are basically interactive scripting consoles: python, irb, node, php -a\n",
    "    System monitoring: top, htop\n",
    "    Reading files or manuals: man, less, more\n",
    "    Window/Session handling: byobu, screen, tmux\n",
    "\n",
    "    Vim\n",
    "    Exit and save:\n",
    "    \n",
    "    <ESC> + :wq\n",
    "    \n",
    "    Exit without saving:\n",
    "    \n",
    "    <ESC> + :q!\n",
    "    \n",
    "    Nano\n",
    "    Exit and save:\n",
    "    \n",
    "    <Ctrl> + o then <Enter>, then <Ctrl> + x\n",
    "    \n",
    "    Exit without saving:\n",
    "    \n",
    "    <Ctrl> + x then n to discard changes\n",
    "    \n",
    "    Emacs\n",
    "    Exit and save:\n",
    "    \n",
    "    <Ctrl> + x, <Ctrl> + s, then <Ctrl> + x, <Ctrl> + c\n",
    "    \n",
    "    Exit without saving:\n",
    "    \n",
    "    <Ctrl> + x, <Ctrl> + c, then n, <Enter> and yes, \n",
    "    <Enter> to discard any changes.\n",
    "\n",
    "\n",
    "\n",
    "    git\n",
    "    \n",
    "   Command\t    Description\n",
    "    git status\tRun this command any time and often to \n",
    "                check on the status of the files in the git \n",
    "                repository.\n",
    "    git add\t    This command stages changed files, readying them \n",
    "                to be wrapped into the next commit.\n",
    "    git commit\tThis command commits staged files, wrapping them \n",
    "                into a commit. A historical record of commits is \n",
    "                what we refer to as a codebase's version or commit \n",
    "                history.\n",
    "    git log\t    View the repository's commit history.\n",
    "    git diff\n",
    "\n",
    "    Branching: https://medium.com/@eamonocallaghan/why-you-should-be-using-git-branches-in-ls-101-ee2864009f07\n",
    "\n",
    "    git fetch\n",
    "    git push -u origin main\n",
    "    git push\n",
    "    git pull\n",
    "    git diff main origin/main\n",
    "    git pull --ff-only\n",
    "        --ff-only part of this command is an option that is passed\n",
    "        to the command. This tells git exactly how we want to try \n",
    "        and combine the remote changes with our local branch. \n",
    "        In this case it tells git to use a fast-forward merge to \n",
    "        combine the changes (the ff part). You don't need to \n",
    "        understand exactly what this means or how this works, \n",
    "        but in simple terms it moves the history of the local \n",
    "        branch forwards to match the history fetched from the \n",
    "        remote branch. The -only part of ff-only means that if \n",
    "        git can't combine the changes with a fast-forward merge \n",
    "        it should abort the merge.\n",
    "\n",
    "\n",
    "    git clone <remote repository url> <local directory name>\n",
    "\n",
    "    Command\tWhen To Use\n",
    "    git init\tCreate a new local repository.\n",
    "    git remote add origin REMOTEURL\tAdd an existing remote repo \n",
    "    as a remote of existing local repo.\n",
    "    git clone REMOTEURL\tPull down contents of existing remote repo \n",
    "    into a new local repo, and add a remote to the local repo \n",
    "    pointing to remote repo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20757e82-8411-4f9f-b04f-4ff2e5c1b357",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84ce9d95-ac07-49c4-89ed-ed12679754d0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
